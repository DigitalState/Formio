{
  "_args": [
    [
      {
        "raw": "text-mask-all@github:text-mask/text-mask",
        "scope": null,
        "escapedName": "text-mask-all",
        "name": "text-mask-all",
        "rawSpec": "github:text-mask/text-mask",
        "spec": "github:text-mask/text-mask",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:text-mask/text-mask.git",
          "sshUrl": "git+ssh://git@github.com/text-mask/text-mask.git",
          "httpsUrl": "git+https://github.com/text-mask/text-mask.git",
          "gitUrl": "git://github.com/text-mask/text-mask.git",
          "shortcut": "github:text-mask/text-mask",
          "directUrl": "https://raw.githubusercontent.com/text-mask/text-mask/master/package.json"
        }
      },
      "/srv/formio/formio/node_modules/formiojs"
    ]
  ],
  "_from": "text-mask/text-mask",
  "_id": "text-mask-all@0.3.0",
  "_inCache": true,
  "_location": "/text-mask-all",
  "_phantomChildren": {},
  "_requested": {
    "raw": "text-mask-all@github:text-mask/text-mask",
    "scope": null,
    "escapedName": "text-mask-all",
    "name": "text-mask-all",
    "rawSpec": "github:text-mask/text-mask",
    "spec": "github:text-mask/text-mask",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:text-mask/text-mask.git",
      "sshUrl": "git+ssh://git@github.com/text-mask/text-mask.git",
      "httpsUrl": "git+https://github.com/text-mask/text-mask.git",
      "gitUrl": "git://github.com/text-mask/text-mask.git",
      "shortcut": "github:text-mask/text-mask",
      "directUrl": "https://raw.githubusercontent.com/text-mask/text-mask/master/package.json"
    }
  },
  "_requiredBy": [
    "/formiojs"
  ],
  "_resolved": "git://github.com/text-mask/text-mask.git#2745c2576e0cb6569ae8e146eafab2acc8c168cc",
  "_shasum": "1da2c2abd7342f8f19e0e26d283414843c929325",
  "_shrinkwrap": null,
  "_spec": "text-mask-all@github:text-mask/text-mask",
  "_where": "/srv/formio/formio/node_modules/formiojs",
  "author": {
    "name": "M.K. Safi",
    "email": "msafi@msafi.com"
  },
  "babel": {
    "presets": [
      "es2015",
      "stage-0"
    ],
    "plugins": [
      "transform-object-assign"
    ]
  },
  "bugs": {
    "url": "https://github.com/text-mask/text-mask/issues"
  },
  "dependencies": {},
  "description": "Conforms string to given mask or pattern, and can be hooked up to input element",
  "devDependencies": {
    "angular": "^1.5.8",
    "babel-cli": "^6.4.5",
    "babel-core": "^6.4.5",
    "babel-loader": "^6.2.1",
    "babel-plugin-rewire": "^1.0.0-rc-3",
    "babel-plugin-transform-object-assign": "^6.22.0",
    "babel-plugin-transform-runtime": "^6.15.0",
    "babel-preset-es2015": "^6.3.13",
    "babel-preset-react": "^6.3.13",
    "babel-preset-stage-0": "^6.5.0",
    "bootstrap": "^3.3.6",
    "bootstrap-sass": "^3.3.6",
    "chai": "^3.4.1",
    "classnames": "^2.2.3",
    "css-loader": "^0.23.1",
    "enzyme": "^2.3.0",
    "eslint": "^3.3.1",
    "eslint-config-standard": "^5.1.0",
    "eslint-plugin-mocha": "^4.0.0",
    "eslint-plugin-promise": "^2.0.0",
    "eslint-plugin-react": "^6.1.1",
    "eslint-plugin-standard": "^2.0.0",
    "file-loader": "^0.9.0",
    "jsdom": "^9.2.1",
    "lodash": "^4.0.0",
    "mocha": "^3.0.0",
    "mocha-dynamic-tests": "^2.0.0",
    "node-sass": "^3.4.2",
    "react": "^15.3.0",
    "react-addons-test-utils": "^15.3.0",
    "react-dom": "^15.1.0",
    "react-hot-loader": "^1.3.0",
    "react-redux": "^4.4.5",
    "redux": "^3.5.2",
    "redux-actions": "^0.11.0",
    "sass-loader": "^4.0.0",
    "sinon": "^1.17.3",
    "stats-webpack-plugin": "^0.4.0",
    "style-loader": "^0.13.0",
    "url-loader": "^0.5.7",
    "vue": "^2.0.8",
    "vue-html-loader": "^1.2.3",
    "vue-loader": "^9.9.5",
    "webpack": "^1.12.12",
    "webpack-dev-server": "^1.14.1"
  },
  "gitHead": "2745c2576e0cb6569ae8e146eafab2acc8c168cc",
  "greenkeeper": {
    "ignore": [
      "awesome-typescript-loader",
      "ts-node"
    ]
  },
  "homepage": "https://github.com/text-mask/text-mask#readme",
  "keywords": [
    "text mask",
    "input mask",
    "string mask",
    "input formatting",
    "text formatting",
    "string formatting"
  ],
  "license": "Unlicense",
  "main": "index.js",
  "name": "text-mask-all",
  "optionalDependencies": {},
  "readme": "# [![Text Mask](assets/logo.png)](https://github.com/text-mask/text-mask/#readme)\n\n[![Build Status](https://travis-ci.org/text-mask/text-mask.svg?branch=master)](https://travis-ci.org/text-mask/text-mask)\n\nText Mask is an input mask library. It can create input masks for phone, date, currency, zip code, percentage, email, \nand literally anything!\n\nThere are convenient wrappers for React, Angular 2, Ember, and Vue.\n\n## Live demo\n\nSee it in action, [check out the demo page](https://text-mask.github.io/text-mask/).\n\n## Installation and usage\n\n* [React](react#readme)\n* [Angular 2](angular2#readme) or [Angular 1](angular1#readme)\n* [Ember](ember#readme)\n* [Vue](vue#readme)\n* [Vanilla JS](vanilla#readme)\n\n## Expected to work with...\n\nIE9+, Android, Samsung Internet, Windows Phone, iOS, Opera, Firefox, Safari, and Chrome\n\n## Flexible\n\nText Mask is very configurable and allows you to create any type of input mask with minimal APIs.\n[See the documentation for details](https://github.com/text-mask/text-mask/blob/master/componentDocumentation.md#readme).\n\n## Extendable\n\nYou can easily expand the base functionality of Text Mask with addons for more mask types. \n[Checkout existing addons](https://github.com/text-mask/text-mask/tree/master/addons/#readme).\n\n## Robust\n\nText Mask supports pasting, browser auto-fill, and all operations that a user would expect while interacting with\nan input field.\n\nIt works on mobile, has no 3rd party dependencies, and has a tiny footprint (less than 4KB gzipped).\n\n## For any questions, suggestions, or feature requests\n\n[Please file an issue](https://github.com/text-mask/text-mask/issues)!\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/text-mask/text-mask.git"
  },
  "scripts": {
    "addons:build": "webpack -p --config addons/webpack.buildAddons.js",
    "addons:publish": "sh addons/publish.sh",
    "addons:tdd": "npm run addons:test -- --watch",
    "addons:test": "mocha --compilers js:babel-core/register addons/test --require ./common/domSetup.js --recursive",
    "addons:verify": "npm run addons:test -- --verify",
    "angular1:build": "webpack -p --config angular1/webpack.buildAngular1Integration.js",
    "angular1:dev": "webpack-dev-server --content-base angular1/example --port 3000 --config angular1/example/webpack.runAngular1Example.js",
    "angular1:publish": "sh angular1/publish.sh",
    "angular2:ci": "cd angular2 && npm i && npm run ci",
    "angular2:publish": "sh angular2/publish.sh",
    "build": "npm run core:build && npm run react:build && npm run vanilla:build && npm run vue:build && npm run website:build && npm run addons:build",
    "ci": "npm i && npm run test && npm run build && npm run verify",
    "core:build": "webpack -p --config core/webpack.buildCore.js",
    "core:publish": "sh core/publish.sh",
    "core:tdd": "npm run core:test -- --watch",
    "core:test": "mocha --compilers js:babel-core/register core/test --require ./common/domSetup.js --recursive",
    "core:verify": "npm run core:test -- --verify",
    "ember:dev": "cd ember && ember server",
    "ember:publish": "sh ember/publish.sh",
    "ember:test": "cd ember && npm install && ember test",
    "git:done": "git checkout gh-pages && git rebase master && git checkout master && git push origin master --tags && git push origin gh-pages",
    "lint": "eslint . --ext .js --ext .jsx --fix || true",
    "loud-lint": "eslint . --ext .js --ext .jsx",
    "react:build": "webpack -p --config react/webpack.buildReactIntegration.js",
    "react:dev": "node react/example/server.js",
    "react:publish": "sh react/publish.sh",
    "react:tdd": "npm run react:test -- --watch",
    "react:test": "mocha --compilers jsx:babel-core/register react/test --require ./common/domSetup.js --recursive",
    "react:verify": "npm run react:test -- --verify",
    "react:watch": "webpack --watch --config react/webpack.buildReactIntegration.js",
    "test": "npm run loud-lint && npm run core:test && npm run react:test && npm run vanilla:test && npm run vue:test && npm run addons:test",
    "textMask:publish": "sh publish.sh",
    "vanilla:build": "webpack -p --config vanilla/webpack.buildVanillaIntegration.js",
    "vanilla:dev": "webpack-dev-server --content-base vanilla/example --port 3000 --config vanilla/example/webpack.runVanillaExample.js",
    "vanilla:publish": "sh vanilla/publish.sh",
    "vanilla:tdd": "npm run vanilla:test -- --watch",
    "vanilla:test": "mocha --compilers js:babel-core/register vanilla/test --require ./common/domSetup.js --recursive",
    "vanilla:verify": "npm run vanilla:test -- --verify",
    "verify": "npm run core:verify && npm run react:verify && npm run vanilla:verify && npm run vue:verify && npm run addons:verify",
    "vue:build": "webpack -p --config vue/webpack.buildVueDirective.js",
    "vue:dev": "webpack-dev-server --content-base vue/example --port 3000 --config vue/example/webpack.runVueExample.js",
    "vue:publish": "sh vue/publish.sh",
    "vue:tdd": "npm run vue:test -- --watch",
    "vue:test": "mocha --compilers js:babel-core/register vue/test --require ./common/domSetup.js --recursive",
    "vue:verify": "npm run vue:test -- --verify",
    "website": "node website/server.js",
    "website:build": "webpack -p --config website/webpack.buildWebsite.js"
  },
  "version": "0.3.0"
}
