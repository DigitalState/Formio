{"version":3,"sources":["job.js"],"names":["Job","pool","thread","runArgs","sendArgs","emit","run","args","length","Error","send","executeOn","once","bind","promise","Promise","resolve"],"mappings":";;;;AACA;;;;;;;;;;;;IAEqBA,G;;;AACnB,eAAYC,IAAZ,EAAkB;AAAA;;AAAA,iDAChB,wBADgB;;AAEhB,UAAKA,IAAL,GAAcA,IAAd;AACA,UAAKC,MAAL,GAAc,IAAd;;AAEA,UAAKC,OAAL,GAAe,EAAf;AACA,UAAKC,QAAL,GAAgB,EAAhB;;AAEAH,SAAKI,IAAL,CAAU,QAAV;AARgB;AASjB;;gBAEDC,G,kBAAa;AAAA,sCAANC,IAAM;AAANA,UAAM;AAAA;;AACX,QAAIA,KAAKC,MAAL,KAAgB,CAApB,EAAuB;AACrB,YAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,SAAKN,OAAL,GAAeI,IAAf;AACA,WAAO,IAAP;AACD,G;;gBAEDG,I,mBAAc;AACZ,QAAI,KAAKP,OAAL,CAAaK,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAHW,uCAANF,IAAM;AAANA,UAAM;AAAA;;AAKZ,SAAKH,QAAL,GAAgBG,IAAhB;;AAEA,SAAKF,IAAL,CAAU,YAAV;AACA,WAAO,IAAP;AACD,G;;gBAEDM,S,sBAAUT,M,EAAQ;AAAA;;AAChB,yDACGU,IADH,CACQ,SADR,EACmB,KAAKP,IAAL,CAAUQ,IAAV,CAAe,IAAf,EAAqB,MAArB,CADnB,EAEGD,IAFH,CAEQ,OAFR,EAEiB,KAAKP,IAAL,CAAUQ,IAAV,CAAe,IAAf,EAAqB,OAArB,CAFjB,GAGGP,GAHH,0BAGU,KAAKH,OAHf,GAIGO,IAJH,8BAIW,KAAKN,QAJhB;;AAMA,SAAKF,MAAL,GAAcA,MAAd;;AAEA,SAAKG,IAAL,CAAU,eAAV;AACA,WAAO,IAAP;AACD,G;;gBAEDS,O,sBAAU;AAAA;;AACR;AACA,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B;AACA,UAAI,CAAC,OAAKd,MAAV,EAAkB;AAChB,eAAKU,IAAL,CAAU,eAAV,EAA2B,YAAM;AAC/BI,kBAAQ,OAAKd,MAAL,CAAYY,OAAZ,EAAR;AACD,SAFD;AAGD,OAJD,MAIO;AACLE,gBAAQ,OAAKd,MAAL,CAAYY,OAAZ,EAAR;AACD;AACF,KATM,CAAP;AAUD,G;;;;;kBAzDkBd,G","file":"job.js","sourcesContent":["\nimport EventEmitter from 'eventemitter3';\n\nexport default class Job extends EventEmitter {\n  constructor(pool) {\n    super();\n    this.pool   = pool;\n    this.thread = null;\n\n    this.runArgs = [];\n    this.sendArgs = [];\n\n    pool.emit('newJob', this);\n  }\n\n  run(...args) {\n    if (args.length === 0) {\n      throw new Error('Cannot call .run() without arguments.');\n    }\n\n    this.runArgs = args;\n    return this;\n  }\n\n  send(...args) {\n    if (this.runArgs.length === 0) {\n      throw new Error('Cannot .send() before .run().');\n    }\n\n    this.sendArgs = args;\n\n    this.emit('readyToRun');\n    return this;\n  }\n\n  executeOn(thread) {\n    thread\n      .once('message', this.emit.bind(this, 'done'))\n      .once('error', this.emit.bind(this, 'error'))\n      .run(...this.runArgs)\n      .send(...this.sendArgs);\n\n    this.thread = thread;\n\n    this.emit('threadChanged');\n    return this;\n  }\n\n  promise() {\n    // Always return a promise\n    return new Promise((resolve) => {\n      // If the thread isn't set, listen for the threadChanged event\n      if (!this.thread) {\n        this.once('threadChanged', () => {\n          resolve(this.thread.promise());\n        });\n      } else {\n        resolve(this.thread.promise());\n      }\n    });\n  }\n}\n"]}