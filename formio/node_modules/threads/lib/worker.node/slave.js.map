{"version":3,"sources":["worker.node/slave.js"],"names":["vm","require","errorCatcherInPlace","messageHandler","console","error","setupErrorCatcher","process","on","send","message","stack","runAsSandboxedModule","code","sandbox","Buffer","clearInterval","clearTimeout","module","exports","setInterval","setTimeout","runInNewContext","messageHandlerDone","args","response","transfer","pop","messageHandlerProgress","progress","data","initByScript","script","initByMethod","method","doRun","param"],"mappings":";;AAAA;AACA;AACA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;;AAEA,IAAIC,sBAAsB,KAA1B;AACA,IAAIC,iBAAiB,0BAAW;AAC9BC,UAAQC,KAAR,CAAc,8BAAd,EAD8B,CACoB;AACnD,CAFD;;AAIA,SAASC,iBAAT,GAA6B;AAC3B,MAAIJ,mBAAJ,EAAyB;AAAE;AAAS;;AAEpCK,UAAQC,EAAR,CAAW,mBAAX,EAAgC,UAASH,KAAT,EAAgB;AAC9CE,YAAQE,IAAR,CAAa;AACXJ,aAAQ,EAAEK,SAAUL,MAAMK,OAAlB,EAA2BC,OAAQN,MAAMM,KAAzC;AADG,KAAb;AAGD,GAJD;;AAMAT,wBAAsB,IAAtB;AACD;;AAGD,SAASU,oBAAT,CAA8BC,IAA9B,EAAoC;AAClC,MAAIC,UAAU;AACZC,kBADY;AAEZX,oBAFY;AAGZY,gCAHY;AAIZC,8BAJY;AAKZC,YAAgB,EAAEC,SAAU,IAAZ,EALJ;AAMZlB,oBANY;AAOZmB,4BAPY;AAQZC;AARY,GAAd;;AAWArB,KAAGsB,eAAH,CAAmBT,IAAnB,EAAyBC,OAAzB;AACA,SAAOA,QAAQI,MAAR,CAAeC,OAAtB;AACD;;AAGD,SAASI,kBAAT,GAAqC;AAAA,oCAANC,IAAM;AAANA,QAAM;AAAA;;AACnCjB,UAAQE,IAAR,CAAa,EAAEgB,UAAUD,IAAZ,EAAb;AACD;;AAEDD,mBAAmBG,QAAnB,GAA8B,YAAkB;AAAA,qCAANF,IAAM;AAANA,QAAM;AAAA;;AAC9CA,OAAKG,GAAL,GAD8C,CAC1B;AACpBJ,sCAAsBC,IAAtB;AACD,CAHD;;AAKA,SAASI,sBAAT,CAAgCC,QAAhC,EAA0C;AACxCtB,UAAQE,IAAR,CAAa,EAAEoB,kBAAF,EAAb;AACD;;AAGDtB,QAAQC,EAAR,CAAW,SAAX,EAAsB,UAASsB,IAAT,EAAe;AACnC,MAAIA,KAAKC,YAAT,EAAuB;AACrB5B,qBAAiBF,QAAQ6B,KAAKE,MAAb,CAAjB;AACD;;AAED,MAAIF,KAAKG,YAAT,EAAuB;AACrB9B,qBAAiBS,qBAAqB,sBAAsBkB,KAAKI,MAAhD,CAAjB;AACD;;AAED,MAAIJ,KAAKK,KAAT,EAAgB;AACd;AACA;AACA7B;;AAEAH,mBAAe2B,KAAKM,KAApB,EAA2Bb,kBAA3B,EAA+CK,sBAA/C;AACD;AACF,CAhBD","file":"slave.js","sourcesContent":["// not using ES6 import/export syntax, since we need to require() in a handler\n// what the ES6 syntax does not permit\nconst vm = require('vm');\n\nlet errorCatcherInPlace = false;\nlet messageHandler = function() {\n  console.error('No thread logic initialized.');    // eslint-disable-line no-console\n};\n\nfunction setupErrorCatcher() {\n  if (errorCatcherInPlace) { return; }\n\n  process.on('uncaughtException', function(error) {\n    process.send({\n      error : { message : error.message, stack : error.stack }\n    });\n  });\n\n  errorCatcherInPlace = true;\n}\n\n\nfunction runAsSandboxedModule(code) {\n  var sandbox = {\n    Buffer,\n    console,\n    clearInterval,\n    clearTimeout,\n    module        : { exports : null },\n    require,\n    setInterval,\n    setTimeout\n  };\n\n  vm.runInNewContext(code, sandbox);\n  return sandbox.module.exports;\n}\n\n\nfunction messageHandlerDone(...args) {\n  process.send({ response: args });\n}\n\nmessageHandlerDone.transfer = function(...args) {\n  args.pop();         // ignore last parameter, since it's only useful for browser code\n  messageHandlerDone(...args);\n};\n\nfunction messageHandlerProgress(progress) {\n  process.send({ progress });\n}\n\n\nprocess.on('message', function(data) {\n  if (data.initByScript) {\n    messageHandler = require(data.script);\n  }\n\n  if (data.initByMethod) {\n    messageHandler = runAsSandboxedModule('module.exports = ' + data.method);\n  }\n\n  if (data.doRun) {\n    // it's a good idea to wait until first thread logic run to set this up,\n    // so initialization errors will be printed to console\n    setupErrorCatcher();\n\n    messageHandler(data.param, messageHandlerDone, messageHandlerProgress);\n  }\n});\n"]}